worker_processes  1;

events {
  worker_connections  1024;
}

http {
  include       mime.types;
  default_type  text/plain;

  access_log /var/log/nginx/access.log;

  upstream inventory {
    server inventory;
  }
  upstream rating {
    server rating;
  }
  upstream auth-service {
    server auth-service;
  }

  map $http_apikey $client_plan {
    default '';
    'startup-apikey' 'startup';
    'premium-apikey' 'premium';
  }

  map $http_apikey $isApiKeyValid {
    default '0';
    'startup-apikey' '1';
    'premium-apikey' '1';
  }

  map $isallowed-$isApiKeyValid-$request_method-$uri $backendName {
    default 'unix:/tmp/not-found.sock:';
    ~^1-1-GET-/inventory/ inventory;
    ~^1-1-POST-/inventory/ inventory;
    ~^1-1-DELETE-/inventory/.+ inventory;
    ~^(1|0)-(1|0)-(POST|GET|DELETE)-/inventory/ 'unix:/tmp/forbidden.sock:';
    ~^1-1--GET-/rating/suggest rating;
    ~^1-1--POST-/rating/ rating;
    ~^1-1--DELETE-/rating/.+ rating;
    ~^(1|0)-(1|0)-(POST|GET|DELETE)-/rating/ 'unix:/tmp/forbidden.sock:';
  }

  map $request_uri $proxiedPath {
    default '$request_uri';
    ~^/inventory(?<other>.+)$ $other;
    ~^/rating(?<other>.+)$ $other;
  }

  map $originalMethod-$originalUri $groupExpression {
    default 'false';
    ~GET-/inventory/ 'groups.user || groups.editor || groups.admin';
    ~POST-/inventory/ 'groups.editor || groups.admin';
    ~DELETE-/inventory/ 'groups.admin && plan === "premium"';
  }

  server {
    listen 80 default_server;
    server_name localhost;

    location / {
      set $originalMethod $request_method;
      set $originalUri $request_uri;

      auth_request /auth;
      auth_request_set $userid $upstream_http_userid;
      auth_request_set $isallowed $upstream_http_isallowed;

      proxy_set_header userid $userid;
      proxy_pass 'http://$backendName$proxiedPath';
    }

    location = /auth {
      internal;

      proxy_set_header 'ge' $groupExpression;
      proxy_set_header 'plan' $client_plan;
      proxy_pass 'http://auth-service';
    }
  }

  server {
    listen unix:/tmp/not-found.sock;
    return 404 '{"name":"not-found","path":"$request_uri"}';
  }

  server {
    listen unix:/tmp/forbidden.sock;
    return 403 '{"name":"forbidden","path":"$request_uri"}';
  }
}
